// Paxos message definitions

syntax = "proto3";

package paxospb;

// Paxos RPC definitions
service Paxos {
	// Prepare message
	rpc Prepare (PrepareReq) returns (PrepareResp) {};
	rpc Extend (ExtendReq) returns (ExtendResp) {};
	rpc AcceptLog (AcceptLogReq) returns (AcceptLogResp) {};
	rpc AddMember (MemberUpdate) returns (MemberUpdateResp) {};
	rpc DelMember (MemberUpdate) returns (MemberUpdateResp) {};
	rpc RequestSync (SyncReq) returns (stream SyncEntry);
}

// Prepare request
message PrepareReq {
	string requesterId = 1;
	uint64 term	= 2;
	uint64 lastLogIdx = 3;
	uint64 leaseTime = 4;
}

// Prepare response
message PrepareResp {
	string votedFor = 1;
	uint64 currentTerm = 2;
	uint64 lastLogIdx = 3;
}

// Extend lease message
message ExtendReq {
	string requesterId = 1;
	uint64 term = 2;
	uint64 leaseTime = 3;
}

// Extend response
message ExtendResp {
	string votedFor = 1;
}

// Log entry
message LogEntry {
	uint64 term = 1;
	uint64 logIdx = 2;
	bytes Data = 3;
}

// Accept log request
message AcceptLogReq {
	string requesterId = 1;
	int64 term	= 2;
	int64 prevLogIdx = 3;
	LogEntry logs = 4;
}

// Accept log response
message AcceptLogResp {
	string votedFor = 1;
	uint64 currentTerm = 2;
	uint64 lastLogIdx = 3;
}

// Node information
message Node {
	string memberId = 1;
	string url = 2;
}

// MemberUpdate message
message MemberUpdate {
	string requesterId = 1;
	int64 term	= 2;
	Node addedMember = 3;
	Node removedMember = 4;
	Node members = 5;
}

// Member update response
message MemberUpdateResp {
	bool success = 1;
}

// Sync request from rookie to Leader
message SyncReq {
	string memberId = 1;
	int64 lastTerm = 2;
	int64 lastLogIdx = 3;
}

enum EntryType {
	LogType = 0;
	SnapshotType = 1;
}

// SyncEntry streamed from leader to rookie
message SyncEntry {
	EntryType entryType = 1;
	LogEntry logEntry = 2;
	bytes snapshotEntry = 3;
}
