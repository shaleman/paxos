// Code generated by protoc-gen-gogo.
// source: paxos.proto
// DO NOT EDIT!

/*
	Package paxospb is a generated protocol buffer package.

	It is generated from these files:
		paxos.proto

	It has these top-level messages:
		PrepareReq
		PrepareResp
		ExtendReq
		ExtendResp
		LogEntry
		AcceptLogReq
		AcceptLogResp
		Node
		MemberUpdate
		MemberUpdateResp
		SyncReq
		SyncEntry
*/
package paxospb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EntryType int32

const (
	EntryType_LogType      EntryType = 0
	EntryType_SnapshotType EntryType = 1
)

var EntryType_name = map[int32]string{
	0: "LogType",
	1: "SnapshotType",
}
var EntryType_value = map[string]int32{
	"LogType":      0,
	"SnapshotType": 1,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

// Prepare request
type PrepareReq struct {
	RequesterId string `protobuf:"bytes,1,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LastLogIdx  uint64 `protobuf:"varint,3,opt,name=lastLogIdx,proto3" json:"lastLogIdx,omitempty"`
	LeaseTime   uint64 `protobuf:"varint,4,opt,name=leaseTime,proto3" json:"leaseTime,omitempty"`
}

func (m *PrepareReq) Reset()         { *m = PrepareReq{} }
func (m *PrepareReq) String() string { return proto.CompactTextString(m) }
func (*PrepareReq) ProtoMessage()    {}

// Prepare response
type PrepareResp struct {
	VotedFor    string `protobuf:"bytes,1,opt,name=votedFor,proto3" json:"votedFor,omitempty"`
	CurrentTerm uint64 `protobuf:"varint,2,opt,name=currentTerm,proto3" json:"currentTerm,omitempty"`
	LastLogIdx  uint64 `protobuf:"varint,3,opt,name=lastLogIdx,proto3" json:"lastLogIdx,omitempty"`
}

func (m *PrepareResp) Reset()         { *m = PrepareResp{} }
func (m *PrepareResp) String() string { return proto.CompactTextString(m) }
func (*PrepareResp) ProtoMessage()    {}

// Extend lease message
type ExtendReq struct {
	RequesterId string `protobuf:"bytes,1,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	Term        uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LeaseTime   uint64 `protobuf:"varint,3,opt,name=leaseTime,proto3" json:"leaseTime,omitempty"`
}

func (m *ExtendReq) Reset()         { *m = ExtendReq{} }
func (m *ExtendReq) String() string { return proto.CompactTextString(m) }
func (*ExtendReq) ProtoMessage()    {}

// Extend response
type ExtendResp struct {
	VotedFor string `protobuf:"bytes,1,opt,name=votedFor,proto3" json:"votedFor,omitempty"`
}

func (m *ExtendResp) Reset()         { *m = ExtendResp{} }
func (m *ExtendResp) String() string { return proto.CompactTextString(m) }
func (*ExtendResp) ProtoMessage()    {}

// Log entry
type LogEntry struct {
	Term   uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LogIdx uint64 `protobuf:"varint,2,opt,name=logIdx,proto3" json:"logIdx,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}

// Accept log request
type AcceptLogReq struct {
	RequesterId string    `protobuf:"bytes,1,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	Term        int64     `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	PrevLogIdx  int64     `protobuf:"varint,3,opt,name=prevLogIdx,proto3" json:"prevLogIdx,omitempty"`
	Logs        *LogEntry `protobuf:"bytes,4,opt,name=logs" json:"logs,omitempty"`
}

func (m *AcceptLogReq) Reset()         { *m = AcceptLogReq{} }
func (m *AcceptLogReq) String() string { return proto.CompactTextString(m) }
func (*AcceptLogReq) ProtoMessage()    {}

func (m *AcceptLogReq) GetLogs() *LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

// Accept log response
type AcceptLogResp struct {
	VotedFor    string `protobuf:"bytes,1,opt,name=votedFor,proto3" json:"votedFor,omitempty"`
	CurrentTerm uint64 `protobuf:"varint,2,opt,name=currentTerm,proto3" json:"currentTerm,omitempty"`
	LastLogIdx  uint64 `protobuf:"varint,3,opt,name=lastLogIdx,proto3" json:"lastLogIdx,omitempty"`
}

func (m *AcceptLogResp) Reset()         { *m = AcceptLogResp{} }
func (m *AcceptLogResp) String() string { return proto.CompactTextString(m) }
func (*AcceptLogResp) ProtoMessage()    {}

// Node information
type Node struct {
	MemberId string `protobuf:"bytes,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}

// MemberUpdate message
type MemberUpdate struct {
	RequesterId   string `protobuf:"bytes,1,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	Term          int64  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	AddedMember   *Node  `protobuf:"bytes,3,opt,name=addedMember" json:"addedMember,omitempty"`
	RemovedMember *Node  `protobuf:"bytes,4,opt,name=removedMember" json:"removedMember,omitempty"`
	Members       *Node  `protobuf:"bytes,5,opt,name=members" json:"members,omitempty"`
}

func (m *MemberUpdate) Reset()         { *m = MemberUpdate{} }
func (m *MemberUpdate) String() string { return proto.CompactTextString(m) }
func (*MemberUpdate) ProtoMessage()    {}

func (m *MemberUpdate) GetAddedMember() *Node {
	if m != nil {
		return m.AddedMember
	}
	return nil
}

func (m *MemberUpdate) GetRemovedMember() *Node {
	if m != nil {
		return m.RemovedMember
	}
	return nil
}

func (m *MemberUpdate) GetMembers() *Node {
	if m != nil {
		return m.Members
	}
	return nil
}

// Member update response
type MemberUpdateResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MemberUpdateResp) Reset()         { *m = MemberUpdateResp{} }
func (m *MemberUpdateResp) String() string { return proto.CompactTextString(m) }
func (*MemberUpdateResp) ProtoMessage()    {}

// Sync request from rookie to Leader
type SyncReq struct {
	MemberId   string `protobuf:"bytes,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	LastTerm   int64  `protobuf:"varint,2,opt,name=lastTerm,proto3" json:"lastTerm,omitempty"`
	LastLogIdx int64  `protobuf:"varint,3,opt,name=lastLogIdx,proto3" json:"lastLogIdx,omitempty"`
}

func (m *SyncReq) Reset()         { *m = SyncReq{} }
func (m *SyncReq) String() string { return proto.CompactTextString(m) }
func (*SyncReq) ProtoMessage()    {}

// SyncEntry streamed from leader to rookie
type SyncEntry struct {
	EntryType     EntryType `protobuf:"varint,1,opt,name=entryType,proto3,enum=paxospb.EntryType" json:"entryType,omitempty"`
	LogEntry      *LogEntry `protobuf:"bytes,2,opt,name=logEntry" json:"logEntry,omitempty"`
	SnapshotEntry []byte    `protobuf:"bytes,3,opt,name=snapshotEntry,proto3" json:"snapshotEntry,omitempty"`
}

func (m *SyncEntry) Reset()         { *m = SyncEntry{} }
func (m *SyncEntry) String() string { return proto.CompactTextString(m) }
func (*SyncEntry) ProtoMessage()    {}

func (m *SyncEntry) GetLogEntry() *LogEntry {
	if m != nil {
		return m.LogEntry
	}
	return nil
}

func init() {
	proto.RegisterEnum("paxospb.EntryType", EntryType_name, EntryType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Paxos service

type PaxosClient interface {
	// Prepare message
	Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareResp, error)
	Extend(ctx context.Context, in *ExtendReq, opts ...grpc.CallOption) (*ExtendResp, error)
	AcceptLog(ctx context.Context, in *AcceptLogReq, opts ...grpc.CallOption) (*AcceptLogResp, error)
	AddMember(ctx context.Context, in *MemberUpdate, opts ...grpc.CallOption) (*MemberUpdateResp, error)
	RequestSync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (Paxos_RequestSyncClient, error)
}

type paxosClient struct {
	cc *grpc.ClientConn
}

func NewPaxosClient(cc *grpc.ClientConn) PaxosClient {
	return &paxosClient{cc}
}

func (c *paxosClient) Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareResp, error) {
	out := new(PrepareResp)
	err := grpc.Invoke(ctx, "/paxospb.Paxos/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Extend(ctx context.Context, in *ExtendReq, opts ...grpc.CallOption) (*ExtendResp, error) {
	out := new(ExtendResp)
	err := grpc.Invoke(ctx, "/paxospb.Paxos/Extend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) AcceptLog(ctx context.Context, in *AcceptLogReq, opts ...grpc.CallOption) (*AcceptLogResp, error) {
	out := new(AcceptLogResp)
	err := grpc.Invoke(ctx, "/paxospb.Paxos/AcceptLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) AddMember(ctx context.Context, in *MemberUpdate, opts ...grpc.CallOption) (*MemberUpdateResp, error) {
	out := new(MemberUpdateResp)
	err := grpc.Invoke(ctx, "/paxospb.Paxos/AddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) RequestSync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (Paxos_RequestSyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Paxos_serviceDesc.Streams[0], c.cc, "/paxospb.Paxos/RequestSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &paxosRequestSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Paxos_RequestSyncClient interface {
	Recv() (*SyncEntry, error)
	grpc.ClientStream
}

type paxosRequestSyncClient struct {
	grpc.ClientStream
}

func (x *paxosRequestSyncClient) Recv() (*SyncEntry, error) {
	m := new(SyncEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Paxos service

type PaxosServer interface {
	// Prepare message
	Prepare(context.Context, *PrepareReq) (*PrepareResp, error)
	Extend(context.Context, *ExtendReq) (*ExtendResp, error)
	AcceptLog(context.Context, *AcceptLogReq) (*AcceptLogResp, error)
	AddMember(context.Context, *MemberUpdate) (*MemberUpdateResp, error)
	RequestSync(*SyncReq, Paxos_RequestSyncServer) error
}

func RegisterPaxosServer(s *grpc.Server, srv PaxosServer) {
	s.RegisterService(&_Paxos_serviceDesc, srv)
}

func _Paxos_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosServer).Prepare(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Paxos_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosServer).Extend(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Paxos_AcceptLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AcceptLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosServer).AcceptLog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Paxos_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MemberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosServer).AddMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Paxos_RequestSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaxosServer).RequestSync(m, &paxosRequestSyncServer{stream})
}

type Paxos_RequestSyncServer interface {
	Send(*SyncEntry) error
	grpc.ServerStream
}

type paxosRequestSyncServer struct {
	grpc.ServerStream
}

func (x *paxosRequestSyncServer) Send(m *SyncEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _Paxos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paxospb.Paxos",
	HandlerType: (*PaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Paxos_Prepare_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _Paxos_Extend_Handler,
		},
		{
			MethodName: "AcceptLog",
			Handler:    _Paxos_AcceptLog_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Paxos_AddMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestSync",
			Handler:       _Paxos_RequestSync_Handler,
			ServerStreams: true,
		},
	},
}

func (m *PrepareReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PrepareReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequesterId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.RequesterId)))
		i += copy(data[i:], m.RequesterId)
	}
	if m.Term != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Term))
	}
	if m.LastLogIdx != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LastLogIdx))
	}
	if m.LeaseTime != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LeaseTime))
	}
	return i, nil
}

func (m *PrepareResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PrepareResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VotedFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.VotedFor)))
		i += copy(data[i:], m.VotedFor)
	}
	if m.CurrentTerm != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.CurrentTerm))
	}
	if m.LastLogIdx != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LastLogIdx))
	}
	return i, nil
}

func (m *ExtendReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExtendReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequesterId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.RequesterId)))
		i += copy(data[i:], m.RequesterId)
	}
	if m.Term != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Term))
	}
	if m.LeaseTime != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LeaseTime))
	}
	return i, nil
}

func (m *ExtendResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExtendResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VotedFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.VotedFor)))
		i += copy(data[i:], m.VotedFor)
	}
	return i, nil
}

func (m *LogEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LogEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Term))
	}
	if m.LogIdx != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LogIdx))
	}
	if m.Data != nil {
		if len(m.Data) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintPaxos(data, i, uint64(len(m.Data)))
			i += copy(data[i:], m.Data)
		}
	}
	return i, nil
}

func (m *AcceptLogReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AcceptLogReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequesterId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.RequesterId)))
		i += copy(data[i:], m.RequesterId)
	}
	if m.Term != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Term))
	}
	if m.PrevLogIdx != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.PrevLogIdx))
	}
	if m.Logs != nil {
		data[i] = 0x22
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Logs.Size()))
		n1, err := m.Logs.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AcceptLogResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AcceptLogResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VotedFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.VotedFor)))
		i += copy(data[i:], m.VotedFor)
	}
	if m.CurrentTerm != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.CurrentTerm))
	}
	if m.LastLogIdx != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LastLogIdx))
	}
	return i, nil
}

func (m *Node) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Node) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemberId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.MemberId)))
		i += copy(data[i:], m.MemberId)
	}
	if len(m.Url) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	return i, nil
}

func (m *MemberUpdate) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MemberUpdate) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequesterId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.RequesterId)))
		i += copy(data[i:], m.RequesterId)
	}
	if m.Term != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Term))
	}
	if m.AddedMember != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintPaxos(data, i, uint64(m.AddedMember.Size()))
		n2, err := m.AddedMember.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RemovedMember != nil {
		data[i] = 0x22
		i++
		i = encodeVarintPaxos(data, i, uint64(m.RemovedMember.Size()))
		n3, err := m.RemovedMember.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Members != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintPaxos(data, i, uint64(m.Members.Size()))
		n4, err := m.Members.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *MemberUpdateResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MemberUpdateResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		data[i] = 0x8
		i++
		if m.Success {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SyncReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SyncReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemberId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPaxos(data, i, uint64(len(m.MemberId)))
		i += copy(data[i:], m.MemberId)
	}
	if m.LastTerm != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LastTerm))
	}
	if m.LastLogIdx != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LastLogIdx))
	}
	return i, nil
}

func (m *SyncEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SyncEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntryType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPaxos(data, i, uint64(m.EntryType))
	}
	if m.LogEntry != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPaxos(data, i, uint64(m.LogEntry.Size()))
		n5, err := m.LogEntry.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.SnapshotEntry != nil {
		if len(m.SnapshotEntry) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintPaxos(data, i, uint64(len(m.SnapshotEntry)))
			i += copy(data[i:], m.SnapshotEntry)
		}
	}
	return i, nil
}

func encodeFixed64Paxos(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Paxos(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPaxos(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PrepareReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequesterId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovPaxos(uint64(m.Term))
	}
	if m.LastLogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.LastLogIdx))
	}
	if m.LeaseTime != 0 {
		n += 1 + sovPaxos(uint64(m.LeaseTime))
	}
	return n
}

func (m *PrepareResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.VotedFor)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.CurrentTerm != 0 {
		n += 1 + sovPaxos(uint64(m.CurrentTerm))
	}
	if m.LastLogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.LastLogIdx))
	}
	return n
}

func (m *ExtendReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequesterId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovPaxos(uint64(m.Term))
	}
	if m.LeaseTime != 0 {
		n += 1 + sovPaxos(uint64(m.LeaseTime))
	}
	return n
}

func (m *ExtendResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.VotedFor)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	return n
}

func (m *LogEntry) Size() (n int) {
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovPaxos(uint64(m.Term))
	}
	if m.LogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.LogIdx))
	}
	if m.Data != nil {
		l = len(m.Data)
		if l > 0 {
			n += 1 + l + sovPaxos(uint64(l))
		}
	}
	return n
}

func (m *AcceptLogReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequesterId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovPaxos(uint64(m.Term))
	}
	if m.PrevLogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.PrevLogIdx))
	}
	if m.Logs != nil {
		l = m.Logs.Size()
		n += 1 + l + sovPaxos(uint64(l))
	}
	return n
}

func (m *AcceptLogResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.VotedFor)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.CurrentTerm != 0 {
		n += 1 + sovPaxos(uint64(m.CurrentTerm))
	}
	if m.LastLogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.LastLogIdx))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemberId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	return n
}

func (m *MemberUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequesterId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovPaxos(uint64(m.Term))
	}
	if m.AddedMember != nil {
		l = m.AddedMember.Size()
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.RemovedMember != nil {
		l = m.RemovedMember.Size()
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.Members != nil {
		l = m.Members.Size()
		n += 1 + l + sovPaxos(uint64(l))
	}
	return n
}

func (m *MemberUpdateResp) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *SyncReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemberId)
	if l > 0 {
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.LastTerm != 0 {
		n += 1 + sovPaxos(uint64(m.LastTerm))
	}
	if m.LastLogIdx != 0 {
		n += 1 + sovPaxos(uint64(m.LastLogIdx))
	}
	return n
}

func (m *SyncEntry) Size() (n int) {
	var l int
	_ = l
	if m.EntryType != 0 {
		n += 1 + sovPaxos(uint64(m.EntryType))
	}
	if m.LogEntry != nil {
		l = m.LogEntry.Size()
		n += 1 + l + sovPaxos(uint64(l))
	}
	if m.SnapshotEntry != nil {
		l = len(m.SnapshotEntry)
		if l > 0 {
			n += 1 + l + sovPaxos(uint64(l))
		}
	}
	return n
}

func sovPaxos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPaxos(x uint64) (n int) {
	return sovPaxos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrepareReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIdx", wireType)
			}
			m.LastLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastLogIdx |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseTime", wireType)
			}
			m.LeaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LeaseTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTerm", wireType)
			}
			m.CurrentTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CurrentTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIdx", wireType)
			}
			m.LastLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastLogIdx |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseTime", wireType)
			}
			m.LeaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LeaseTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIdx", wireType)
			}
			m.LogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LogIdx |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptLogReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Term |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLogIdx", wireType)
			}
			m.PrevLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PrevLogIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = &LogEntry{}
			}
			if err := m.Logs.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptLogResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTerm", wireType)
			}
			m.CurrentTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CurrentTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIdx", wireType)
			}
			m.LastLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastLogIdx |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberUpdate) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Term |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddedMember == nil {
				m.AddedMember = &Node{}
			}
			if err := m.AddedMember.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedMember == nil {
				m.RemovedMember = &Node{}
			}
			if err := m.RemovedMember.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = &Node{}
			}
			if err := m.Members.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberUpdateResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberUpdateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberUpdateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTerm", wireType)
			}
			m.LastTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastTerm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIdx", wireType)
			}
			m.LastLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastLogIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			m.EntryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EntryType |= (EntryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogEntry == nil {
				m.LogEntry = &LogEntry{}
			}
			if err := m.LogEntry.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotEntry", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotEntry = append([]byte{}, data[iNdEx:postIndex]...)
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaxos(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPaxos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaxos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaxos(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaxos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaxos   = fmt.Errorf("proto: integer overflow")
)
